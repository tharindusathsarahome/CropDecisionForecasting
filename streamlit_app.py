import streamlit as st
from google import generativeai as genai
from PIL import Image
import io
import time
import re
from fpdf import FPDF

# --- Streamlit ‡∂¥‡∑í‡∂ß‡∑î ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏ ---
st.set_page_config(
    page_title="Plant Disease Analyzer",
    page_icon="üå±",
    layout="centered"
)

# --- PDF Generation Function ---
class PDF(FPDF):
    def header(self):
        pass
    def footer(self):
        self.set_y(-15)
    # Italic ('I') ‡∑Ä‡∑ô‡∂±‡∑î‡∑Ä‡∂ß Regular ('') ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
        self.set_font('IskoolaPota', '', 8) 
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_pdf(text):
    pdf = PDF()
    try:
        # uni=True is important for Unicode fonts
        pdf.add_font('IskoolaPota', '', 'fonts/IskoolaPota-Regular.ttf', uni=True) 
    except RuntimeError:
        st.error("‡∑Ü‡∑ú‡∂±‡∑ä‡∂ß‡∑ä ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ('fonts/IskoolaPota-Regular.ttf') ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ë‡∂∫ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
        return None
        
    pdf.set_font('IskoolaPota', '', 12)
    pdf.add_page()
    pdf.multi_cell(0, 10, text)
    
    # .encode('latin-1') ‡∂ö‡∑ú‡∂ß‡∑É ‡∂â‡∑Ä‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.
    # pdf.output(dest='S') ‡∂∏‡∂ú‡∑í‡∂±‡∑ä ‡∂ö‡∑ô‡∂Ω‡∑í‡∂±‡∑ä‡∂∏ bytes ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ö.
    return pdf.output(dest='S')

# --- API ‡∂∫‡∂≠‡∑î‡∂ª ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏ ---
try:
    api_key = st.secrets['GEMINI_API_KEY']
    genai.configure(api_key=api_key)
except (KeyError, Exception):
    st.error("GEMINI_API_KEY ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ë‡∂∫ ‡∂î‡∂∂‡∂ú‡∑ö Streamlit ‡∂ª‡∑Ñ‡∑É‡∑ä ‡∑Ä‡∑ô‡∂≠ ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
    st.stop()

# --- AI ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∂Ø‡∑ä‡∂∞‡∂≠‡∑í ‡∂ã‡∂¥‡∂Ø‡∑ô‡∑É‡∑ä ---
IDENTIFICATION_INSTRUCTION = "‡∂î‡∂∂‡∑ö ‡∂ë‡∂ö‡∂∏ ‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂∫ ‡∑Ä‡∂±‡∑ä‡∂±‡∑ö ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑í ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∑ö ‡∂á‡∂≠‡∑í ‡∑Å‡∑è‡∂ö‡∂∫‡∑ö ‡∂±‡∂∏ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂∫‡∑í. ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∂Ω‡∑ô‡∑É ‡∑Å‡∑è‡∂ö‡∂∫‡∑ö ‡∂±‡∂∏ ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±. ‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É: '‡∂ª‡∑ù‡∑É' ‡∑Ñ‡∑ù '‡∂≠‡∂ö‡∑ä‡∂ö‡∑è‡∂Ω‡∑í'. ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂±‡∂∏‡∑ä, '‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö' ‡∂Ω‡∑ô‡∑É ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
PRELIMINARY_ANALYSIS_INSTRUCTION = "‡∂î‡∂∂ ‡∑Å‡∑è‡∂ö ‡∂ª‡∑ù‡∂ú ‡∂¥‡∑í‡∑Ö‡∑í‡∂∂‡∂≥ ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∂•‡∂∫‡∑ô‡∂ö‡∑í. ‡∂î‡∂∂‡∂ú‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±. ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ì ‡∂á‡∂≠‡∑í ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫ ‡∑É‡∑Ñ ‡∑Å‡∑è‡∂ö‡∂∫‡∑ö ‡∂±‡∂∏ ‡∂∏‡∂≠ ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä‡∑Ä, ‡∂ª‡∑ù‡∂ú‡∂∫ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂¥‡∂ö‡∑è‡∂ª‡∑ì ‡∑Ä‡∂± ‡∑É‡∂ª‡∂Ω ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± 2-3‡∂ö‡∑ä ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∂Ö‡∑É‡∂±‡∑ä‡∂±. ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´‡∂∫, ‡∑Ñ‡∑í‡∂ª‡∑î ‡∂ë‡∑Ö‡∑í‡∂∫, ‡∑É‡∑Ñ ‡∂¢‡∂Ω‡∂∫ ‡∂Ø‡∑ê‡∂∏‡∑ì‡∂∏ ‡∑Ä‡∑ê‡∂±‡∑í ‡∂Ø‡∑ö ‡∂ú‡∑ê‡∂± ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫. ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∂¥‡∑Ñ‡∂≠ ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±:\n[ANALYSIS]: <‡∂î‡∂∂ ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠‡∑ä ‡∂ª‡∑ù‡∂ú ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∂´ ‡∂¥‡∑í‡∑Ö‡∑í‡∂∂‡∂≥ ‡∂ö‡∑ô‡∂ß‡∑í ‡∑É‡∑è‡∂ª‡∑è‡∂Ç‡∑Å‡∂∫‡∂ö‡∑ä>\n[QUESTIONS]: <‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ 1> | <‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ 2>"
FINAL_ANALYSIS_INSTRUCTION = "‡∂î‡∂∂ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∑ê‡∂¥‡∂∫‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑ä‡∂≠‡∑ö ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∂∏‡∂´‡∑í. ‡∂î‡∂∂ ‡∂ã‡∂Ø‡∑ä‡∂∑‡∑í‡∂Ø ‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∑Ä ‡∑É‡∑Ñ ‡∑Å‡∑è‡∂ö ‡∂ª‡∑ù‡∂ú ‡∂¥‡∑í‡∑Ö‡∑í‡∂∂‡∂≥ ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∂•‡∂∫‡∑ô‡∂ö‡∑í. ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∂á‡∑É‡∑î‡∑Ä‡∂Ø ‡∂î‡∂∂‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫ ‡∂∫‡∑î‡∂≠‡∑î‡∂∫. ‡∂î‡∂∂‡∂ß ‡∂Ø‡∑ê‡∂±‡∑ä ‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂ª‡∑ù‡∂ú ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∂´ ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫‡∂ö‡∑ä ‡∑É‡∑Ñ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä ‡∑É‡∂¥‡∂∫‡∂± ‡∂Ω‡∂Ø ‡∂¥‡∑è‡∂ª‡∑í‡∑É‡∂ª‡∑í‡∂ö ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ì ‡∂á‡∂≠. ‡∂∏‡∑ô‡∂∏ ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª, ‡∂¥‡∑Ñ‡∂≠ ‡∑É‡∂≥‡∑Ñ‡∂±‡∑ä ‡∂Ø‡∑ë ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∑É‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö ‡∑É‡∑Ñ ‡∂Ö‡∑Ä‡∑É‡∑è‡∂± ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä‡∂ö‡∑ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±:\n1.  **‡∂±‡∑í‡∑Å‡∑ä‡∂†‡∑í‡∂≠ ‡∂ª‡∑ù‡∂ú ‡∑Ä‡∑í‡∂±‡∑í‡∑Å‡∑ä‡∂†‡∂∫:** ‡∑Ä‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂ª‡∑ù‡∂ú‡∂∫‡∑ö ‡∂±‡∂∏.\n2.  **‡∑Ñ‡∑ö‡∂≠‡∑î:** ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø ‡∑É‡∑ê‡∂Ω‡∂ö‡∑í‡∂Ω‡∑ä‡∂Ω‡∂ß ‡∂ú‡∂±‡∑í‡∂∏‡∑í‡∂±‡∑ä ‡∑Ñ‡∑ö‡∂≠‡∑î ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.\n3.  **‡∑Ä‡∑í‡∑É‡∂≥‡∑î‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂¥‡∑è‡∂Ω‡∂±‡∂∫:** ‡∂ö‡∑ä‡∑Ç‡∂´‡∑í‡∂ö ‡∂¥‡∑í‡∂∫‡∑Ä‡∂ª, ‡∂ö‡∑è‡∂∂‡∂±‡∑í‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑è‡∂ª, ‡∂ª‡∑É‡∑è‡∂∫‡∂±‡∑í‡∂ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂ö‡∑è‡∂ª, ‡∑É‡∑Ñ ‡∑Ä‡∑ê‡∑Ö‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏ ‡∂Ω‡∑ô‡∑É ‡∂ö‡∑ú‡∂ß‡∑É‡∑ä ‡∂ö‡∂ª ‡∂â‡∂Ø‡∑í‡∂ª‡∑í‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."
FOLLOW_UP_INSTRUCTION = "‡∂î‡∂∂ ‡∑Å‡∑è‡∂ö ‡∂ª‡∑ù‡∂ú ‡∂¥‡∑í‡∑Ö‡∑í‡∂∂‡∂≥ ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∂• ‡∑É‡∑Ñ‡∑è‡∂∫‡∂ö‡∂∫‡∑ô‡∂ö‡∑í. ‡∂î‡∂∂ ‡∑É‡∑Ñ ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂Ö‡∂≠‡∂ª ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∑É‡∂Ç‡∑Ä‡∑è‡∂Ø‡∂∫‡∂ö‡∑ä ‡∂∏‡∑ö ‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì ‡∂á‡∂≠. ‡∑É‡∂Ç‡∑Ä‡∑è‡∂Ø‡∂∫‡∑ö ‡∑É‡∂±‡∑ä‡∂Ø‡∂ª‡∑ä‡∂∑‡∂∫ (‡∑Å‡∑è‡∂ö‡∂∫‡∑ö ‡∂±‡∂∏, ‡∂ª‡∑ù‡∂ú ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∂´, ‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑ô‡∂ª ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫) ‡∂∏‡∂≠ ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä‡∑Ä ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ú‡∑ö ‡∑Ä‡∑ê‡∂©‡∑í‡∂Ø‡∑î‡∂ª ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±. ‡∂î‡∂∂‡∑ö ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∑ô‡∂±‡∑ä ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±, ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è ‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂á‡∑É‡∑î‡∑Ä‡∂Ø. ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂ö‡∑ô‡∂ß‡∑í ‡∑É‡∑Ñ ‡∂Ö‡∂Ø‡∑è‡∑Ö ‡∂Ω‡∑ô‡∑É ‡∂≠‡∂∂‡∑è ‡∂ú‡∂±‡∑ä‡∂±."

# --- ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í ‡∑É‡∑ê‡∂ö‡∑É‡∑î‡∂∏ (‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì) ---
identification_model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest", system_instruction=IDENTIFICATION_INSTRUCTION)
preliminary_model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest", system_instruction=PRELIMINARY_ANALYSIS_INSTRUCTION)
final_report_model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest", system_instruction=FINAL_ANALYSIS_INSTRUCTION)
follow_up_model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest", system_instruction=FOLLOW_UP_INSTRUCTION)

# --- Session State ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ---
if "messages" not in st.session_state: st.session_state.messages = []
if "conversation_stage" not in st.session_state: st.session_state.conversation_stage = "initial"
if "plant_name" not in st.session_state: st.session_state.plant_name = ""
if "initial_analysis" not in st.session_state: st.session_state.initial_analysis = ""
if "final_report_content" not in st.session_state: st.session_state.final_report_content = ""
if "processed_file_id" not in st.session_state: st.session_state.processed_file_id = None
if "uploader_key" not in st.session_state: st.session_state.uploader_key = 0
if "image_bytes" not in st.session_state: st.session_state.image_bytes = None

def reset_session():
    uploader_key = st.session_state.get('uploader_key', 0)
    st.session_state.clear()
    st.session_state.uploader_key = uploader_key + 1
    st.session_state.conversation_stage = "initial"
    st.rerun()

# --- UI ‡∑É‡∑Ñ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í ---
st.title("üå± Plant Disease Analyzer")
st.write("‡∂î‡∂∂‡∑ö ‡∑Å‡∑è‡∂ö‡∂∫‡∑ö ‡∂ª‡∑ù‡∂ú‡∑ì ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∂ö‡∑ú‡∂ß‡∑É‡∂ö ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∑ä ‡∂¥‡∑ê‡∂≠‡∑í ‡∂≠‡∑ì‡∂ª‡∑î‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")

with st.sidebar:
    st.header("‡∂î‡∂∂‡∑ö ‡∑Å‡∑è‡∂ö‡∂∫")
    uploaded_file = st.file_uploader("‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∑ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±", type=["jpg", "jpeg", "png"], key=f"uploader_{st.session_state.uploader_key}")
    if st.button("üîÑ ‡∂±‡∑Ä ‡∑É‡∂Ç‡∑Ä‡∑è‡∂Ø‡∂∫‡∂ö‡∑ä"):
        reset_session()

# --- ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í‡∂∫ ---
if uploaded_file and uploaded_file.file_id != st.session_state.processed_file_id:
    st.session_state.messages = []
    st.session_state.final_report_content = ""
    st.session_state.processed_file_id = uploaded_file.file_id
    img_bytes = uploaded_file.getvalue()
    st.session_state.image_bytes = img_bytes
    image = Image.open(io.BytesIO(img_bytes))
    with st.spinner("‡∑Å‡∑è‡∂ö‡∂∫ ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂±‡∑í‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì..."):
        try:
            response = identification_model.generate_content(image)
            plant_name = response.text.strip()
            unrecognized_keywords = ["‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠", "‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö", "‡∂Ö‡∂¥‡∑Ñ‡∑É‡∑î‡∂∫‡∑í", "‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂±‡∑ê‡∂≠"]
            is_unrecognized = (not plant_name or any(keyword in plant_name for keyword in unrecognized_keywords) or len(plant_name.split()) > 3)
            if is_unrecognized:
                st.error("‡∑É‡∂∏‡∑è‡∑Ä‡∂±‡∑ä‡∂±, ‡∂∏‡∑ô‡∂∏ ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∑ô‡∂±‡∑ä ‡∑Å‡∑è‡∂ö‡∂∫ ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í‡∑Ä ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∂©‡∑è‡∂≠‡∑ä ‡∂¥‡∑ê‡∑Ñ‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∑ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.")
                time.sleep(3)
                reset_session()
            else:
                st.session_state.plant_name = plant_name
                st.session_state.conversation_stage = "awaiting_confirmation"
                st.session_state.messages.append({"role": "assistant", "content": f"‡∂∏‡∑ô‡∂∫ '{plant_name}' ‡∑Å‡∑è‡∂ö‡∂∫‡∂ö‡∑ä‡∂Ø? (‡∂î‡∑Ä‡∑ä / ‡∂±‡∑ê‡∂≠)"})
                st.rerun()
        except Exception as e:
            st.error(f"‡∑Å‡∑è‡∂ö‡∂∫ ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: {e}")
            time.sleep(3); reset_session()

# --- ‡∑É‡∂Ç‡∑Ä‡∑è‡∂Ø ‡∂â‡∂≠‡∑í‡∑Ñ‡∑è‡∑É‡∂∫ ‡∑É‡∑Ñ UI ---
if st.session_state.processed_file_id:
    with st.sidebar:
        st.image(st.session_state.image_bytes, caption="‡∂î‡∂∂‡∑ö ‡∑Å‡∑è‡∂ö‡∂∫")

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if st.session_state.final_report_content:
    pdf_bytes = generate_pdf(st.session_state.final_report_content)
    if pdf_bytes:
        st.download_button(label="üìÑ ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä PDF ‡∂Ω‡∑ô‡∑É ‡∂∂‡∑è‡∂ú‡∂±‡∑ä‡∂±", data=pdf_bytes, file_name=f"{st.session_state.plant_name}_analysis_report.pdf", mime="application/pdf")

def handle_streaming_response(response_stream):
    with st.chat_message("assistant"):
        placeholder = st.empty()
        full_response = ""
        for chunk in response_stream:
            full_response += chunk.text
            placeholder.markdown(full_response + "‚ñå")
        placeholder.markdown(full_response)
    st.session_state.messages.append({"role": "assistant", "content": full_response})
    return full_response

# --- ‡∂†‡∑ê‡∂ß‡∑ä ‡∂Ü‡∂Ø‡∑è‡∂±‡∂∫ ‡∑É‡∑Ñ ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Ä‡∂Ω‡∑í ---
if prompt := st.chat_input("‡∂î‡∂∂‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª/‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∂∫ ‡∂∏‡∑ô‡∑Ñ‡∑í ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±..."):
    if not st.session_state.processed_file_id:
        st.warning("‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂¥‡∑Ö‡∂∏‡∑î‡∑Ä ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∑ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."); st.stop()

    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"): st.markdown(prompt)

    stage = st.session_state.conversation_stage
    image = Image.open(io.BytesIO(st.session_state.image_bytes))

    if stage == "awaiting_confirmation":
        if any(word in prompt.lower() for word in ["‡∂î‡∑Ä‡∑ä", "‡∂î‡∑Ä‡∑î", "ow", "yes"]):
            with st.spinner("‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä..."):
                try:
                    response = preliminary_model.generate_content([f"‡∂∏‡∑ô‡∂∫ {st.session_state.plant_name} ‡∑Å‡∑è‡∂ö‡∂∫‡∂ö‡∑í.", image])
                    analysis_match = re.search(r"\[ANALYSIS\]: (.*?)\n\[QUESTIONS\]:", response.text, re.DOTALL)
                    questions_match = re.search(r"\[QUESTIONS\]: (.*)", response.text, re.DOTALL)
                    if analysis_match and questions_match:
                        st.session_state.initial_analysis = analysis_match.group(1).strip()
                        questions = questions_match.group(1).strip().replace(" | ", "\n- ")
                        follow_up_message = (f"‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í. ‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂±‡∑í‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∂´‡∂∫‡∂ß ‡∂Ö‡∂±‡∑î‡∑Ä, {st.session_state.initial_analysis.lower()}.\n\n"
                                           f"‡∂ª‡∑ù‡∂ú‡∂∫ ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∑Ä ‡∑Ñ‡∂≥‡∑î‡∂±‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è, ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂∏‡∑ô‡∂∏ ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂±‡∑Ä‡∂Ω‡∂ß ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±:\n- {questions}")
                        st.session_state.messages.append({"role": "assistant", "content": follow_up_message})
                        st.session_state.conversation_stage = "awaiting_environmental_info"
                        st.rerun()
                    else: st.error("‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫ (‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂†‡∑è‡∂ª‡∂∫ ‡∂±‡∑ú‡∂ú‡∑ê‡∂Ω‡∂¥‡∑ö).")
                except Exception as e: st.error(f"‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")
        else:
            st.session_state.messages.append({"role": "assistant", "content": "‡∂≠‡∑ö‡∂ª‡∑î‡∂∏‡∑ä ‡∂ú‡∂≠‡∑ä‡∂≠‡∑è. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫‡∂ö‡∑ä ‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±."})
            time.sleep(3); reset_session()

    elif stage == "awaiting_environmental_info":
        with st.spinner("‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ö‡∂±‡∑î‡∑Ä ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä..."):
            try:
                final_prompt = (f"‡∑Å‡∑è‡∂ö‡∂∫: {st.session_state.plant_name}.\n"
                                f"‡∂∏‡∑ñ‡∂Ω‡∑í‡∂ö ‡∂ª‡∑ù‡∂ú ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∂´: {st.session_state.initial_analysis}.\n"
                                f"‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑è‡∂ú‡∑ö ‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î: {prompt}\n\n"
                                "‡∂â‡∑Ñ‡∂≠ ‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑É‡∑Ñ ‡∂°‡∑è‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥‡∂∫ ‡∂∏‡∂≠ ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä‡∑Ä ‡∑É‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∑è‡∂≠‡∑ä‡∂∏‡∂ö, ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä ‡∑Ä‡∑è‡∂ª‡∑ä‡∂≠‡∑è‡∑Ä ‡∑É‡∂¥‡∂∫‡∂±‡∑ä‡∂±.")
                
                # ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í, ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                response_stream = final_report_model.generate_content([final_prompt, image], stream=True)
                
                full_response = handle_streaming_response(response_stream)
                st.session_state.final_report_content = full_response
                
                follow_up_prompt_msg = "‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä. ‡∂î‡∂∂‡∂ß ‡∂∏‡∑ö ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂∫‡∑ô‡∂±‡∑ä ‡∂≠‡∑Ä‡∂≠‡∑ä ‡∂¥‡∑ä‚Äç‡∂ª‡∑Å‡∑ä‡∂± ‡∂á‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂Ø‡∑ê‡∂±‡∑ä ‡∑Ä‡∑í‡∂∏‡∑É‡∂±‡∑ä‡∂±."
                st.session_state.messages.append({"role": "assistant", "content": follow_up_prompt_msg})
                
                st.session_state.conversation_stage = "follow_up_chat"
                st.rerun()
            except Exception as e:
                st.error(f"‡∂Ö‡∑Ä‡∑É‡∑è‡∂± ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: {e}")

    elif stage == "follow_up_chat":
        with st.spinner("‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∑É‡∂ö‡∑É‡∂∏‡∑í‡∂±‡∑ä..."):
            try:
                chat_history = [{"role": "user" if msg["role"] == "user" else "model", "parts": [msg["content"]]} for msg in st.session_state.messages]
                chat_history.pop()

                # ‡∂±‡∑í‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í, ‡∑Ä‡∑ô‡∂±‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏
                chat = follow_up_model.start_chat(history=chat_history)
                response_stream = chat.send_message(prompt, stream=True)
                handle_streaming_response(response_stream)
                st.rerun()
            except Exception as e:
                st.error(f"‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫: {e}")

st.divider()
st.caption("‚ö†Ô∏è ‡∂∏‡∑ô‡∂∏ AI ‡∑Ä‡∑í‡∑Å‡∑ä‡∂Ω‡∑ö‡∑Ç‡∂´‡∂∫ ‡∑Ä‡∑ò‡∂≠‡∑ä‡∂≠‡∑ì‡∂∫ ‡∂ö‡∑ò‡∑Ç‡∑í‡∂ö‡∑è‡∂ª‡∑ä‡∂∏‡∑í‡∂ö ‡∂ã‡∂¥‡∂Ø‡∑ô‡∑É‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ü‡∂Ø‡∑ö‡∑Å‡∂ö‡∂∫‡∂ö‡∑ä ‡∑Ä‡∑ö.")